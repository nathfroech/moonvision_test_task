[flake8]
max-complexity = 6
max-line-length = 120
max-string-usages = 10
enable-extensions = G
format = pylint
isort-show-traceback = True
exclude =
    env/*

# Docstrings are not required (but advisable)
# D10*: Missing docstring in ...
# DAR - all draglint rules for docstrings

# Disabling some low-level bandit warning, that would often cause failures for no reason
# S311: Standard pseudo-random generators are not suitable for security/cryptographic purposes.
# S404: Consider possible security implications associated with subprocess module.
# S603: subprocess call - check for execution of untrusted input

# Rule is too annoying to follow it strictly
# WPS110: Found wrong variable name

# Pretty opinionated rule. Sometimes names may be clearer if numbers are always preceded by underscore.
# WPS114: Found underscored name pattern

# This pattern is widely used, it would be annoying to follow this rule
# WPS115: Found upper-case constant in a class

# Arguable rule
# WPS300: Found local folder import

# Don't insist on this rule
# WPS306: Found class without a base class

# It is useful for multiline strings. Just avoid such concatenation for single line ones.
# WPS326: Found implicit string concatenation

# Sometimes it is more clear to have `else` branch. Just be reasonable.
# WPS503: Found useless returning `else` statement

ignore =
    C101,
    W503,
    D10,DAR,
    S311,S404,S603,
    WPS110,WPS114,WPS115,WPS300,WPS306,WPS326,WPS503

per-file-ignores =
    # These files contain commented instructions with code examples
    # E800: Found commented out code
    config/prepare_environment.py:E800
    config/wsgi.py:E800

    # E800: Found commented out code
    # WPS407: Found mutable module constant
    config/settings.py:E800,WPS407

    # Tests will violate some rules - suppressing them
    # S101: Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
    # WPS441: Found protected attribute usage
    */tests/*:S101,WPS441

    # Migration files are being generated automatically and it would be annoying to fix some errors
    # C812: missing trailing comma
    # E501: line too long
    # I001: isort found an import in the wrong position
    # N806: variable in function should be lowercase
    # WPS102: Found incorrect module name pattern
    # WPS221: Found line with high Jones Complexity
    # WPS301: Found dotted raw import
    # WPS317: Found incorrect multi-line parameters
    # WPS432: Found magic number
    */migrations/*:C812,E501,I001,N806,WPS102,WPS221,WPS301,WPS317,WPS432

    # This rule will cause a lot of failures for Django models, because there will be a lot of "not so magic" numbers,
    # meaning for which is clear from context - attributes for fields' max_length, default values etc.
    # WPS432: Found magic number
    # This rule does not recognise Django models design
    # WPS601: Found shadowed class attribute
    */models.py:WPS432,WPS601

[isort]
skip_glob = env/*
line_length = 119
# 3 - vertical hanging indent (inside parentheses, each import in a separate line)
multi_line_output = 3
indent = 4
default_section = FIRSTPARTY
order_by_type = true
atomic = true
combine_as_imports = true
combine_star = false
include_trailing_comma = true
use_parentheses = true

sections = FUTURE,STDLIB,THIRDPARTY,DJANGO,FIRSTPARTY,LOCALFOLDER
known_django = django,model_bakery,rest_framework

[mypy]
python_version = 3.8
check_untyped_defs = True
disallow_any_generics = True
disallow_untyped_calls = True
disallow_untyped_decorators = True
ignore_errors = False
ignore_missing_imports = True
implicit_reexport = False
strict_optional = True
strict_equality = True
no_implicit_optional = True
warn_unused_ignores = True
warn_redundant_casts = True
warn_unused_configs = True
warn_unreachable = True
warn_no_return = True
follow_imports=normal

[mypy-*.tests.*]
# Don't be so strict on tests: it would be difficult to fight with pytest patterns
disallow_untyped_calls = False
disallow_untyped_decorators = False

[mypy-*.conftest]
# mypy fails on pytest.fixture decorator
disallow_untyped_decorators = False

[mypy-*.migrations.*]
# Django migrations should not produce any errors:
ignore_errors = True

[tool:pytest]
DJANGO_SETTINGS_MODULE = config.settings
python_files = test_*.py

[coverage:run]
omit =
    env/*

[coverage:report]
omit =
    */migrations/*
    */static/*
    */tests/*
    */urls.py
    config/settings.py
    config/wsgi.py
    env/*
    manage.py
